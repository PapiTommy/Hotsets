import { Component } from '@angular/core';
import { Router } from '@angular/router';
import * as firebase from 'firebase/app';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import 'firebase/auth';

@Component({
  selector: 'signup-component',
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.scss']
})
export class SignupPage {
  public authForm: FormGroup;
  public authError: string = '';

  constructor(private formBuilder: FormBuilder, private route: Router) {
    this.authForm = formBuilder.group({
      // Validators for the register form
      name: [
        // The Name is required and must have a max length of 26 characters
        '',
        Validators.compose([Validators.required, Validators.maxLength(26)])
      ],
      email: [
        // The Email is required, should be other correct format (@) and must have a max length of 100 characters
        '',
        Validators.compose([
          Validators.required,
          Validators.maxLength(100),
          Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')
        ])
      ],
      password: [
        // The Password is required and must have a max length of 16 characters
        '',
        Validators.compose([Validators.required, Validators.maxLength(16)])
      ]
    });
  }

  password_type: string = 'password';
  eye_status: string = 'fas fa-eye fa-lg clickable';

  togglePasswordMode() {
    if (this.password_type == 'text') {
      this.eye_status = 'fas fa-eye fa-lg clickable';
      this.password_type = 'password';
    } else {
      this.eye_status = 'fas fa-eye-slash fa-lg clickable';
      this.password_type = 'text';
    }
  }

  // Register an account
  signup() {
    var name = this.authForm.value.name; // Get the submitted name from the registered form
    if (name == '' || name.length > 26) {
      // If the name isn't entered or is more than 26 characters
      this.authError = 'The name is badly formatted.'; // Return error
    } else {
      firebase
        .auth()
        .createUserWithEmailAndPassword(
          // Firebase authentication (generates a user ID based on the email and password)
          this.authForm.value.email, // Get the submitted email from the registered form
          this.authForm.value.password // Get the submitted password from the registered form
        )
        .then(async userCredential => {
          await userCredential.user
            .updateProfile({
              displayName: this.authForm.value.name // Get the submitted  name from the registered form and set it as the displayname in firebase
            })
            .then(() => {
              // If displayname was updated
              this.authForm.reset(); // Make sure all the text in the form is cleared
              this.authError = ''; // Reset the error display
              this.authForm = this.formBuilder.group({
                // Reset the form
                name: [
                  '',
                  Validators.compose([
                    Validators.required,
                    Validators.maxLength(26)
                  ])
                ],
                email: [
                  '',
                  Validators.compose([
                    Validators.required,
                    Validators.maxLength(100),
                    Validators.pattern(
                      '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'
                    )
                  ])
                ],
                password: [
                  '',
                  Validators.compose([
                    Validators.required,
                    Validators.maxLength(16)
                  ])
                ]
              });
              this.route.navigate(['/login']); // Navigate to the "Login" page
            })
            .catch(error => {
              // If there is an error when displaying the name
              this.authError = error.toString().slice(7); // Return the error if there is a problem updating the users display name
            });
        })
        .catch(error => {
          // If there is an error when authenticating/validating the account
          this.authError = error.toString().slice(7); // Return the error if there is a problem creating the account (this is generated by firebase)
        });
    }
  }
}
